// Code generated by mockery v2.53.5. DO NOT EDIT.

package uow

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UnitOfWork is an autogenerated mock type for the UnitOfWork type
type UnitOfWork[T interface{}] struct {
	mock.Mock
}

type UnitOfWork_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *UnitOfWork[T]) EXPECT() *UnitOfWork_Expecter[T] {
	return &UnitOfWork_Expecter[T]{mock: &_m.Mock}
}

// Commit provides a mock function with given fields: ctx
func (_m *UnitOfWork[T]) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type UnitOfWork_Commit_Call[T interface{}] struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UnitOfWork_Expecter[T]) Commit(ctx interface{}) *UnitOfWork_Commit_Call[T] {
	return &UnitOfWork_Commit_Call[T]{Call: _e.mock.On("Commit", ctx)}
}

func (_c *UnitOfWork_Commit_Call[T]) Run(run func(ctx context.Context)) *UnitOfWork_Commit_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UnitOfWork_Commit_Call[T]) Return(_a0 error) *UnitOfWork_Commit_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_Commit_Call[T]) RunAndReturn(run func(context.Context) error) *UnitOfWork_Commit_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RegisterClean provides a mock function with given fields: in
func (_m *UnitOfWork[T]) RegisterClean(in ...T) error {
	_va := make([]interface{}, len(in))
	for _i := range in {
		_va[_i] = in[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterClean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...T) error); ok {
		r0 = rf(in...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_RegisterClean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterClean'
type UnitOfWork_RegisterClean_Call[T interface{}] struct {
	*mock.Call
}

// RegisterClean is a helper method to define mock.On call
//   - in ...T
func (_e *UnitOfWork_Expecter[T]) RegisterClean(in ...interface{}) *UnitOfWork_RegisterClean_Call[T] {
	return &UnitOfWork_RegisterClean_Call[T]{Call: _e.mock.On("RegisterClean",
		append([]interface{}{}, in...)...)}
}

func (_c *UnitOfWork_RegisterClean_Call[T]) Run(run func(in ...T)) *UnitOfWork_RegisterClean_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UnitOfWork_RegisterClean_Call[T]) Return(_a0 error) *UnitOfWork_RegisterClean_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_RegisterClean_Call[T]) RunAndReturn(run func(...T) error) *UnitOfWork_RegisterClean_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RegisterDeleted provides a mock function with given fields: in
func (_m *UnitOfWork[T]) RegisterDeleted(in ...T) error {
	_va := make([]interface{}, len(in))
	for _i := range in {
		_va[_i] = in[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...T) error); ok {
		r0 = rf(in...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_RegisterDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDeleted'
type UnitOfWork_RegisterDeleted_Call[T interface{}] struct {
	*mock.Call
}

// RegisterDeleted is a helper method to define mock.On call
//   - in ...T
func (_e *UnitOfWork_Expecter[T]) RegisterDeleted(in ...interface{}) *UnitOfWork_RegisterDeleted_Call[T] {
	return &UnitOfWork_RegisterDeleted_Call[T]{Call: _e.mock.On("RegisterDeleted",
		append([]interface{}{}, in...)...)}
}

func (_c *UnitOfWork_RegisterDeleted_Call[T]) Run(run func(in ...T)) *UnitOfWork_RegisterDeleted_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UnitOfWork_RegisterDeleted_Call[T]) Return(_a0 error) *UnitOfWork_RegisterDeleted_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_RegisterDeleted_Call[T]) RunAndReturn(run func(...T) error) *UnitOfWork_RegisterDeleted_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RegisterDirty provides a mock function with given fields: in
func (_m *UnitOfWork[T]) RegisterDirty(in ...T) error {
	_va := make([]interface{}, len(in))
	for _i := range in {
		_va[_i] = in[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDirty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...T) error); ok {
		r0 = rf(in...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_RegisterDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDirty'
type UnitOfWork_RegisterDirty_Call[T interface{}] struct {
	*mock.Call
}

// RegisterDirty is a helper method to define mock.On call
//   - in ...T
func (_e *UnitOfWork_Expecter[T]) RegisterDirty(in ...interface{}) *UnitOfWork_RegisterDirty_Call[T] {
	return &UnitOfWork_RegisterDirty_Call[T]{Call: _e.mock.On("RegisterDirty",
		append([]interface{}{}, in...)...)}
}

func (_c *UnitOfWork_RegisterDirty_Call[T]) Run(run func(in ...T)) *UnitOfWork_RegisterDirty_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UnitOfWork_RegisterDirty_Call[T]) Return(_a0 error) *UnitOfWork_RegisterDirty_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_RegisterDirty_Call[T]) RunAndReturn(run func(...T) error) *UnitOfWork_RegisterDirty_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RegisterNew provides a mock function with given fields: in
func (_m *UnitOfWork[T]) RegisterNew(in ...T) error {
	_va := make([]interface{}, len(in))
	for _i := range in {
		_va[_i] = in[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...T) error); ok {
		r0 = rf(in...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_RegisterNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNew'
type UnitOfWork_RegisterNew_Call[T interface{}] struct {
	*mock.Call
}

// RegisterNew is a helper method to define mock.On call
//   - in ...T
func (_e *UnitOfWork_Expecter[T]) RegisterNew(in ...interface{}) *UnitOfWork_RegisterNew_Call[T] {
	return &UnitOfWork_RegisterNew_Call[T]{Call: _e.mock.On("RegisterNew",
		append([]interface{}{}, in...)...)}
}

func (_c *UnitOfWork_RegisterNew_Call[T]) Run(run func(in ...T)) *UnitOfWork_RegisterNew_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *UnitOfWork_RegisterNew_Call[T]) Return(_a0 error) *UnitOfWork_RegisterNew_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_RegisterNew_Call[T]) RunAndReturn(run func(...T) error) *UnitOfWork_RegisterNew_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *UnitOfWork[T]) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnitOfWork_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type UnitOfWork_Rollback_Call[T interface{}] struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UnitOfWork_Expecter[T]) Rollback(ctx interface{}) *UnitOfWork_Rollback_Call[T] {
	return &UnitOfWork_Rollback_Call[T]{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *UnitOfWork_Rollback_Call[T]) Run(run func(ctx context.Context)) *UnitOfWork_Rollback_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UnitOfWork_Rollback_Call[T]) Return(_a0 error) *UnitOfWork_Rollback_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UnitOfWork_Rollback_Call[T]) RunAndReturn(run func(context.Context) error) *UnitOfWork_Rollback_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewUnitOfWork creates a new instance of UnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWork[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWork[T] {
	mock := &UnitOfWork[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
